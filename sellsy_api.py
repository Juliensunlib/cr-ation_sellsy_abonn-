import os
import json
import time
import requests
import logging
from typing import Dict, List, Optional
from datetime import datetime, timedelta

class SellsyAPI:
    """
    Client API pour Sellsy v2 bas√© sur l'authentification OAuth 2.0.
    """
    
    # URL de l'API v2
    API_BASE_URL = "https://api.sellsy.com/v2"
    # URL correcte pour l'authentification OAuth2 de Sellsy v2
    AUTH_URL = "https://login.sellsy.com/oauth2/access-tokens"
    
    def __init__(self, client_id, client_secret, access_token=None, refresh_token=None, logger=None):
        """
        Initialise le client API Sellsy v2.
        
        Args:
            client_id: Identifiant client OAuth 2.0
            client_secret: Secret client OAuth 2.0
            access_token: Token d'acc√®s (optionnel)
            refresh_token: Token de rafra√Æchissement (optionnel)
            logger: Logger pour journaliser les actions
        """
        self.client_id = client_id
        self.client_secret = client_secret
        self.access_token = access_token
        self.refresh_token = refresh_token
        self.token_expires_at = None
        
        # D√©finir un logger par d√©faut si aucun n'est fourni
        if logger is None:
            self.logger = logging.getLogger('SellsyAPI')
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO)
        else:
            self.logger = logger
        
        self.logger.debug("SellsyAPI v2 initialis√©e avec succ√®s")
    
    def _get_auth_header(self) -> Dict:
        """
        Obtient l'en-t√™te d'authentification pour les requ√™tes API.
        
        Returns:
            En-t√™te d'authentification
        """
        if self._is_token_expired():
            self.refresh_access_token()
            
        return {"Authorization": f"Bearer {self.access_token}"}
    
    def _is_token_expired(self) -> bool:
        """
        V√©rifie si le token d'acc√®s est expir√©.
        
        Returns:
            True si le token est expir√© ou non d√©fini, False sinon
        """
        if not self.access_token or not self.token_expires_at:
            return True
            
        return datetime.now() >= self.token_expires_at
    
    def get_access_token(self) -> bool:
        """
        Obtient un nouveau token d'acc√®s en utilisant le flux d'authentification client credentials.
        
        Returns:
            True si l'obtention du token a r√©ussi, False sinon
        """
        try:
            self.logger.info("üîÑ Obtention d'un nouveau token d'acc√®s...")
            
            # Pr√©paration du payload pour la requ√™te
            payload = {
                "grant_type": "client_credentials",
                "client_id": self.client_id,
                "client_secret": self.client_secret
            }
            
            # En-t√™tes pour sp√©cifier le type de contenu
            headers = {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
            
            # Debug pour voir ce qui est envoy√©
            self.logger.debug(f"Envoi de requ√™te d'authentification √† {self.AUTH_URL}")
            self.logger.debug(f"Payload: {payload}")
            
            # Requ√™te avec gestion explicite des timeouts et v√©rification SSL
            response = requests.post(
                self.AUTH_URL, 
                json=payload,
                headers=headers,
                timeout=30,
                verify=True
            )
            
            # Log de la r√©ponse brute pour diagnostiquer les probl√®mes
            self.logger.debug(f"Code de statut de r√©ponse: {response.status_code}")
            self.logger.debug(f"R√©ponse brute: {response.text[:200]}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    self.access_token = data["access_token"]
                    # Le refresh token n'est pas fourni avec client_credentials
                    # Calcul de la date d'expiration
                    expires_in = data.get("expires_in", 3600)
                    self.token_expires_at = datetime.now() + timedelta(seconds=expires_in - 60)  # -60 pour marge de s√©curit√©
                    
                    self.logger.info(f"‚úÖ Token d'acc√®s obtenu avec succ√®s (expire dans {expires_in} secondes)")
                    return True
                except json.JSONDecodeError as json_err:
                    self.logger.error(f"‚ùå Impossible de d√©coder la r√©ponse JSON: {json_err}")
                    self.logger.error(f"Contenu de la r√©ponse: {response.text}")
                    return False
            else:
                self.logger.error(f"‚ùå √âchec d'obtention du token: {response.status_code}")
                self.logger.error(f"D√©tails: {response.text}")
                
                # V√©rification sp√©cifique pour les erreurs courantes
                if response.status_code == 401:
                    self.logger.error("‚ùå Authentification refus√©e. V√©rifiez vos identifiants client_id et client_secret.")
                elif response.status_code == 400:
                    self.logger.error("‚ùå Requ√™te incorrecte. V√©rifiez le format des param√®tres.")
                
                return False
                
        except requests.exceptions.Timeout:
            self.logger.error("‚ùå Timeout lors de la connexion √† l'API Sellsy")
            return False
        except requests.exceptions.ConnectionError:
            self.logger.error("‚ùå Impossible de se connecter √† l'API Sellsy - V√©rifiez votre connexion internet")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'obtention du token: {str(e)}")
            return False
    
    def refresh_access_token(self) -> bool:
        """
        Rafra√Æchit le token d'acc√®s en utilisant le token de rafra√Æchissement.
        
        Returns:
            True si le rafra√Æchissement a r√©ussi, False sinon
        """
        if self.refresh_token:
            try:
                self.logger.info("üîÑ Rafra√Æchissement du token d'acc√®s...")
                
                payload = {
                    "grant_type": "refresh_token",
                    "client_id": self.client_id,
                    "client_secret": self.client_secret,
                    "refresh_token": self.refresh_token
                }
                
                headers = {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
                
                response = requests.post(
                    self.AUTH_URL, 
                    json=payload,
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        self.access_token = data["access_token"]
                        if "refresh_token" in data:
                            self.refresh_token = data["refresh_token"]
                        expires_in = data.get("expires_in", 3600)
                        self.token_expires_at = datetime.now() + timedelta(seconds=expires_in - 60)
                        
                        self.logger.info(f"‚úÖ Token d'acc√®s rafra√Æchi avec succ√®s")
                        return True
                    except json.JSONDecodeError:
                        self.logger.error(f"‚ùå Impossible de d√©coder la r√©ponse JSON: {response.text}")
                        return False
                else:
                    self.logger.error(f"‚ùå √âchec du rafra√Æchissement du token: {response.status_code}")
                    self.logger.error(f"D√©tails: {response.text}")
                    return False
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erreur lors du rafra√Æchissement du token: {str(e)}")
                return False
        else:
            # Si pas de refresh_token, on utilise le flux client credentials
            return self.get_access_token()
    
    def request_api(self, method: str, endpoint: str, data: Dict = None, params: Dict = None) -> Optional[Dict]:
        """
        Effectue une requ√™te √† l'API Sellsy v2.
        
        Args:
            method: M√©thode HTTP (GET, POST, PUT, DELETE)
            endpoint: Point de terminaison API (sans le pr√©fixe de base)
            data: Donn√©es √† envoyer (pour POST/PUT)
            params: Param√®tres de requ√™te (pour GET)
            
        Returns:
            R√©ponse de l'API ou None en cas d'erreur
        """
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                # S'assurer que nous avons un token valide
                if self._is_token_expired():
                    if not self.get_access_token():
                        self.logger.error("‚ùå Impossible d'obtenir un token d'acc√®s valide")
                        return None
                
                # Pr√©paration de l'URL
                url = f"{self.API_BASE_URL}/{endpoint.lstrip('/')}"
                
                # Pr√©paration des en-t√™tes
                headers = {
                    "Authorization": f"Bearer {self.access_token}",
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
                
                self.logger.debug(f"Requ√™te API v2: {method} {url}")
                if data:
                    self.logger.debug(f"Donn√©es: {json.dumps(data)[:200]}...")
                if params:
                    self.logger.debug(f"Param√®tres: {params}")
                
                # Ex√©cution de la requ√™te avec timeout
                response = requests.request(
                    method=method,
                    url=url,
                    headers=headers,
                    json=data if data else None,
                    params=params if params else None,
                    timeout=30
                )
                
                # V√©rification du statut de la r√©ponse
                if response.status_code in [200, 201, 202, 204]:
                    try:
                        if response.content:
                            result = response.json()
                            self.logger.debug(f"R√©ponse re√ßue: {json.dumps(result)[:200]}...")
                            return result
                        return {"status": "success"}
                    except json.JSONDecodeError:
                        self.logger.error(f"‚ùå R√©ponse non-JSON: {response.text[:200]}")
                        return None
                elif response.status_code == 401:
                    # Token expir√© ou invalide, on tente de rafra√Æchir
                    self.logger.warning("‚ö†Ô∏è Token d'acc√®s expir√©. Tentative de rafra√Æchissement...")
                    if self.refresh_access_token():
                        # On r√©essaie la requ√™te avec le nouveau token lors de la prochaine it√©ration
                        retry_count += 1
                        continue
                    return None
                else:
                    self.logger.error(f"‚ùå Erreur HTTP: {response.status_code}")
                    self.logger.error(f"D√©tails: {response.text}")
                    
                    # Si c'est une erreur temporaire (429, 500, 502, 503, 504), on r√©essaie
                    if response.status_code in [429, 500, 502, 503, 504]:
                        retry_count += 1
                        wait_time = 2 ** retry_count  # Backoff exponentiel
                        self.logger.info(f"‚è±Ô∏è Attente de {wait_time} secondes avant nouvelle tentative ({retry_count}/{max_retries})")
                        time.sleep(wait_time)
                        continue
                    
                    return None
                
            except requests.exceptions.Timeout:
                self.logger.warning(f"‚ö†Ô∏è Timeout lors de la requ√™te (tentative {retry_count+1}/{max_retries})")
                retry_count += 1
                if retry_count < max_retries:
                    time.sleep(2 ** retry_count)  # Backoff exponentiel
                    continue
                self.logger.error("‚ùå √âchec apr√®s plusieurs tentatives (timeout)")
                return None
            except requests.RequestException as e:
                self.logger.error(f"‚ùå Erreur de connexion: {str(e)}")
                return None
            except Exception as e:
                self.logger.error(f"‚ùå Erreur inattendue: {str(e)}")
                self.logger.exception("D√©tails:")
                return None
            
            # Si on arrive ici, c'est qu'on a une r√©ponse correcte ou une erreur d√©finitive
            break
        
        return None  # En cas d'√©chec apr√®s toutes les tentatives
    
    def test_authentication(self) -> bool:
        """
        Teste l'authentification en utilisant un endpoint valide de l'API Sellsy V2.
        
        Returns:
            True si l'authentification est r√©ussie, False sinon
        """
        self.logger.info("üîÑ Test d'authentification Sellsy v2...")
        
        try:
            # Obtenons d'abord un token valide
            if not self.get_access_token():
                self.logger.error("‚ùå Impossible d'obtenir un token valide")
                return False
            
            # Test avec l'endpoint /companies selon la documentation
            response = self.request_api("GET", "/companies", params={"pagination[limit]": 1})
            
            if response is not None:
                self.logger.info("‚úÖ Authentification r√©ussie!")
                return True
            else:
                self.logger.error("‚ùå √âchec d'authentification")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors du test d'authentification: {str(e)}")
            return False
    
    def create_client(self, client_data: Dict) -> Optional[Dict]:
        """
        Cr√©e un nouveau client dans Sellsy.
        
        Args:
            client_data: Donn√©es du client √† cr√©er
            
        Returns:
            R√©ponse de l'API ou None en cas d'erreur
        """
        self.logger.info("üîÑ Cr√©ation d'un nouveau client dans Sellsy v2")
        
        try:
            # D√©terminer le type de client (particulier ou entreprise)
            is_individual = client_data.get("third", {}).get("type") == "person"
            
            # Conversion du format des donn√©es pour l'API v2
            v2_client_data = self._prepare_client_data_for_v2(client_data, is_individual)
            
            # Extraire les donn√©es temporaires avant l'envoi
            address_data = v2_client_data.pop('_address_data', None)
            contact_data = v2_client_data.pop('_contact_data', None)
            
            # API v2 utilise diff√©rents endpoints pour individus et entreprises
            if is_individual:
                endpoint = "/individuals"
            else:
                endpoint = "/companies"
            
            # Ex√©cution de la requ√™te
            self.logger.debug(f"Donn√©es client format√©es pour v2: {v2_client_data}")
            response = self.request_api("POST", endpoint, v2_client_data)
            
            if response:
                # Extraction de l'ID client de la r√©ponse
                client_id = response.get("id")
                self.logger.info(f"‚úÖ Client cr√©√© avec succ√®s! ID: {client_id}")
                
                # Cr√©er l'adresse s√©par√©ment si n√©cessaire
                if client_id and address_data:
                    address_result = self.create_address(client_id, address_data, is_individual)
                    if address_result:
                        self.logger.info(f"‚úÖ Adresse cr√©√©e avec succ√®s pour le client {client_id}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è √âchec de cr√©ation d'adresse pour le client {client_id}")
                
                # Cr√©er le contact s√©par√©ment pour les entreprises
                if client_id and contact_data and not is_individual:
                    contact_result = self._create_client_contact(client_id, contact_data)
                    if contact_result:
                        self.logger.info(f"‚úÖ Contact cr√©√© avec succ√®s pour l'entreprise {client_id}")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è √âchec de cr√©ation du contact pour l'entreprise {client_id}")
                
                return {"status": "success", "client_id": client_id, "response": client_id}
            else:
                self.logger.error("‚ùå √âchec de cr√©ation du client")
                return {"status": "error", "error": "√âchec de cr√©ation du client"}
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la cr√©ation du client: {str(e)}")
            self.logger.exception("D√©tails:")
            return {"status": "error", "error": str(e)}
    
    def _prepare_client_data_for_v2(self, old_data: Dict, is_individual: bool) -> Dict:
        """
        Convertit les donn√©es client du format v1 au format v2 attendu par l'API.
        
        Args:
            old_data: Donn√©es client au format v1
            is_individual: True si le client est un particulier, False sinon
            
        Returns:
            Donn√©es client au format v2
        """
        # Extraction des donn√©es de l'ancien format
        third = old_data.get("third", {})
        contact = old_data.get("contact", {})
        address = old_data.get("address", {})
        
        # Formatage en fonction du type de client
        if is_individual:
            # Format pour les particuliers selon la doc API v2
            result = {
                "firstname": contact.get("firstname", ""),
                "name": contact.get("name", ""),
                "email": contact.get("email", ""),
                "mobile": contact.get("tel", ""),
                "ident": "client"
            }
        else:
            # Format pour les entreprises selon la doc API v2
            result = {
                "name": third.get("name", ""),
                "email": third.get("email", ""),
                "mobile": third.get("tel", ""),
                "type": "client"
            }
            
            # SIRET si disponible
            if "siret" in third and third["siret"]:
                result["siret"] = third["siret"]
        
        # Stocker les donn√©es pour cr√©ation s√©par√©e
        if address:
            result["_address_data"] = address
        if contact and not is_individual:
            result["_contact_data"] = contact
        
        self.logger.debug(f"Donn√©es client format√©es pour v2: {result}")
        return result
    
    def _format_address_for_v2(self, address: Dict) -> Dict:
        """
        Formate une adresse selon le format attendu par l'API v2.
        
        Args:
            address: Donn√©es d'adresse au format v1
            
        Returns:
            Donn√©es d'adresse au format v2
        """
        return {
            "label": address.get("name", "Adresse principale"),
            "address": address.get("address_line_1", ""),
            "address2": address.get("address_line_2", ""),
            "zip": address.get("postal_code", ""),
            "city": address.get("city", ""),
            "countrycode": address.get("country", {}).get("code", "FR")
        }
    
    def get_client(self, client_id: str, is_individual: bool = False) -> Optional[Dict]:
        """
        R√©cup√®re les informations d'un client par son ID.
        
        Args:
            client_id: ID du client √† r√©cup√©rer
            is_individual: True si le client est un particulier, False sinon
            
        Returns:
            Informations du client ou None en cas d'erreur
        """
        endpoint = f"/individuals/{client_id}" if is_individual else f"/companies/{client_id}"
        self.logger.info(f"üîÑ R√©cup√©ration du client ID: {client_id}")
        
        return self.request_api("GET", endpoint)
    
    def update_client(self, client_id: str, client_data: Dict, is_individual: bool = False) -> Optional[Dict]:
        """
        Met √† jour un client existant dans Sellsy.
        
        Args:
            client_id: ID du client √† mettre √† jour
            client_data: Nouvelles donn√©es du client
            is_individual: True si le client est un particulier, False sinon
            
        Returns:
            R√©ponse de l'API ou None en cas d'erreur
        """
        self.logger.info(f"üîÑ Mise √† jour du client ID: {client_id}")
        
        # Conversion du format des donn√©es pour l'API v2
        v2_client_data = self._prepare_client_data_for_v2(client_data, is_individual)
        
        # Extraire les donn√©es temporaires avant l'envoi
        address_data = v2_client_data.pop('_address_data', None)
        contact_data = v2_client_data.pop('_contact_data', None)
        
        # D√©terminer l'endpoint en fonction du type de client
        endpoint = f"/individuals/{client_id}" if is_individual else f"/companies/{client_id}"
        
        # Ex√©cuter la requ√™te
        response = self.request_api("PUT", endpoint, v2_client_data)
        
        if response:
            self.logger.info(f"‚úÖ Client mis √† jour avec succ√®s!")
            
            # Cr√©er l'adresse s√©par√©ment si n√©cessaire
            if client_id and address_data:
                address_result = self.create_address(client_id, address_data, is_individual)
                if address_result:
                    self.logger.info(f"‚úÖ Adresse cr√©√©e avec succ√®s pour le client {client_id}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è √âchec de cr√©ation d'adresse pour le client {client_id}")
            
            # Cr√©er le contact s√©par√©ment pour les entreprises
            if client_id and contact_data and not is_individual:
                contact_result = self._create_client_contact(client_id, contact_data)
                if contact_result:
                    self.logger.info(f"‚úÖ Contact cr√©√© avec succ√®s pour l'entreprise {client_id}")
                else:
                    self.logger.warning(f"‚ö†Ô∏è √âchec de cr√©ation du contact pour l'entreprise {client_id}")
            
            return {"status": "success", "response": response}
        else:
            self.logger.error("‚ùå √âchec de mise √† jour du client")
            return {"status": "error", "error": "√âchec de mise √† jour du client"}
    
    def search_clients(self, search_term: str = None, limit: int = 100, offset: int = 0, type_filter: str = None) -> Optional[Dict]:
        """
        Recherche des clients dans Sellsy.
        
        Args:
            search_term: Terme de recherche (facultatif)
            limit: Nombre maximum de r√©sultats √† retourner
            offset: Position de d√©part pour la pagination
            type_filter: Filtrer par type (client, prospect, etc.)
            
        Returns:
            Liste des clients ou None en cas d'erreur
        """
        self.logger.info(f"üîÑ Recherche de clients" + (f" avec terme: {search_term}" if search_term else ""))
        
        # Param√®tres de recherche
        params = {
            "pagination[limit]": limit,
            "pagination[offset]": offset
        }
        
        if search_term:
            params["search"] = search_term
            
        if type_filter:
            params["type"] = type_filter
        
        # Recherche dans les entreprises et particuliers
        companies = self.request_api("GET", "/companies", params=params) or {"data": []}
        individuals = self.request_api("GET", "/individuals", params=params) or {"data": []}
        
        # Combiner les r√©sultats
        results = []
        
        if "data" in companies:
            for company in companies.get("data", []):
                company["client_type"] = "company"
                results.append(company)
                
        if "data" in individuals:
            for individual in individuals.get("data", []):
                individual["client_type"] = "individual"
                results.append(individual)
        
        # Trier et limiter les r√©sultats
        results = results[:limit]
        
        return {"data": results, "total_count": len(results)}
    
    def create_address(self, client_id: str, address_data: Dict, is_individual: bool = False) -> Optional[Dict]:
        """
        Cr√©e une adresse pour un client existant.
        
        Args:
            client_id: ID du client
            address_data: Donn√©es de l'adresse √† cr√©er
            is_individual: True si le client est un particulier, False sinon
            
        Returns:
            R√©ponse de l'API ou None en cas d'erreur
        """
        entity_type = "individuals" if is_individual else "companies"
        endpoint = f"/{entity_type}/{client_id}/addresses"
        
        # Formatage de l'adresse pour l'API v2
        v2_address_data = self._format_address_for_v2(address_data)
        
        self.logger.info(f"üîÑ Cr√©ation d'une adresse pour le client ID: {client_id}")
        return self.request_api("POST", endpoint, v2_address_data)
    
    def get_client_addresses(self, client_id: str, is_individual: bool = False) -> Optional[Dict]:
        """
        R√©cup√®re les adresses d'un client.
        
        Args:
            client_id: ID du client
            is_individual: True si le client est un particulier, False sinon
            
        Returns:
            Liste des adresses ou None en cas d'erreur
        """
        entity_type = "individuals" if is_individual else "companies"
        endpoint = f"/{entity_type}/{client_id}/addresses"
        
        self.logger.info(f"üîÑ R√©cup√©ration des adresses du client ID: {client_id}")
        return self.request_api("GET", endpoint)
    
    def _create_client_contact(self, client_id: str, contact_data: Dict) -> bool:
        """
        Cr√©e un contact pour une entreprise existante.
        
        Args:
            client_id: ID de l'entreprise
            contact_data: Donn√©es du contact √† cr√©er
            
        Returns:
            True si la cr√©ation a r√©ussi, False sinon
        """
        endpoint = f"/companies/{client_id}/contacts"
        
        # Formater les donn√©es du contact selon la doc API v2
        formatted_contact = {
            "firstname": contact_data.get("firstname", ""),
            "name": contact_data.get("name", ""),
            "email": contact_data.get("email", ""),
            "mobile": contact_data.get("tel", ""),
            "position": contact_data.get("position", "Contact"),
            "ident": "contact"
        }
        
        self.logger.info(f"üîÑ Cr√©ation d'un contact pour l'entreprise ID: {client_id}")
        result = self.request_api("POST", endpoint, formatted_contact)
        
        if result:
            self.logger.info(f"‚úÖ Contact cr√©√© avec succ√®s pour l'entreprise {client_id}")
            return True
        else:
            self.logger.error(f"‚ùå √âchec de cr√©ation du contact pour l'entreprise {client_id}")
            return False